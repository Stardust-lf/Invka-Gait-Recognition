import numpy as np
import pickle
from sklearn.linear_model import LogisticRegression,LinearRegression
import sklearn.metrics as metrics
from sklearn.model_selection import KFold,GridSearchCV,StratifiedKFold,train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
import random
LENLISTNM = [21, 23, 25, 26, 18, 22, 27, 22, 23, 22, 28, 27, 22, 18, 24, 20, 17, 20, 18, 24, 21, 20, 27, 20, 23, 22, 25, 20, 19, 23, 23, 21, 27, 21, 25, 19, 24, 22, 26, 22, 18, 25, 27, 24, 19, 27, 25, 17, 17, 20, 20, 23, 22, 22, 18, 22, 20, 22, 29, 17, 21, 19, 17, 25, 20, 23, 23, 20, 20, 24, 21, 20, 18, 23, 24, 23, 21, 18, 24, 19, 29, 23, 22, 19, 21, 22, 22, 18, 22, 17, 27, 26, 22, 20, 21, 19, 19, 21, 23, 23, 28, 18, 20, 15, 22, 22, 22, 25, 30, 22, 22, 20, 21, 21, 23, 22, 28, 25, 23, 21, 21, 18, 20]
LENLISTBG = [8, 8, 7, 8, 0, 6, 7, 9, 7, 8, 5, 10, 7, 7, 7, 8, 6, 4, 6, 5, 7, 7, 8, 10, 6, 7, 8, 8, 8, 7, 6, 6, 6, 8, 8, 9, 7, 7, 7, 10, 5, 7, 8, 9, 7, 6, 8, 7, 6, 6, 8, 6, 7, 8, 8, 7, 7, 6, 8, 8, 6, 8, 6, 6, 8, 6, 7, 7, 7, 6, 8, 7, 7, 7, 6, 7, 7, 8, 6, 7, 6, 10, 7, 6, 5, 7, 7, 5, 6, 7, 5, 10, 8, 7, 7, 6, 6, 6, 6, 8, 8, 8, 6, 5, 5, 6, 7, 6, 9, 10, 6, 8, 8, 6, 7, 7, 7, 10, 8, 7, 7, 7, 6, 5]
LENLISTCL = [7, 7, 10, 9, 3, 5, 8, 9, 7, 8, 7, 9, 8, 8, 7, 8, 6, 6, 6, 6, 8, 7, 7, 10, 7, 8, 8, 8, 8, 7, 8, 8, 7, 8, 5, 8, 6, 8, 7, 8, 7, 6, 8, 8, 8, 6, 8, 8, 8, 6, 7, 7, 6, 7, 8, 7, 8, 6, 6, 9, 7, 7, 6, 6, 8, 7, 8, 6, 7, 8, 8, 7, 6, 5, 7, 6, 7, 7, 7, 8, 6, 10, 8, 7, 6, 8, 7, 8, 6, 8, 6, 10, 8, 6, 6, 7, 8, 5, 6, 8, 7, 9, 5, 6, 6, 8, 6, 7, 8, 10, 8, 7, 7, 6, 8, 8, 6, 10, 8, 7, 8, 7, 6, 5]
LENLIST00 = [25, 36, 25, 31, 0, 25, 25, 28, 27, 28, 30, 30, 37, 36, 28, 27, 32, 16, 25, 27, 28, 34, 27, 44, 33, 29, 28, 34, 34, 36, 31, 24, 29, 36, 29, 29, 37, 28, 28, 39, 23, 13, 33, 28, 32, 26, 39, 33, 27, 24, 24, 22, 24, 29, 28, 25, 28, 21, 22, 27, 27, 25, 19, 22, 34, 28, 31, 18, 24, 23, 31, 27, 30, 29, 22, 22, 31, 21, 19, 21, 24, 40, 29, 19, 21, 25, 27, 31, 22, 24, 19, 34, 33, 27, 35, 21, 22, 23, 23, 21, 26, 21, 20, 18, 35, 24, 28, 37, 31, 23, 29, 27, 21, 29, 33, 28, 30, 30, 20, 33, 22, 29, 22]
LENLIST36 = [28, 42, 32, 39, 14, 30, 26, 36, 29, 31, 29, 38, 32, 30, 31, 37, 28, 20, 37, 27, 34, 37, 31, 58, 32, 38, 36, 46, 42, 28, 32, 27, 33, 43, 35, 38, 40, 29, 34, 34, 29, 22, 33, 29, 32, 23, 42, 32, 30, 25, 33, 25, 27, 28, 31, 27, 26, 26, 24, 23, 27, 29, 24, 26, 39, 29, 33, 9, 25, 25, 31, 32, 31, 36, 27, 20, 35, 25, 17, 26, 27, 48, 31, 18, 23, 23, 29, 12, 29, 23, 27, 39, 30, 32, 24, 37, 20, 24, 23, 25, 23, 34, 24, 21, 25, 38, 33, 38, 27, 31, 23, 35, 34, 22, 34, 39, 28, 37, 33, 23, 33, 23, 27, 26]
LENLIST72 = [24, 24, 25, 26, 12, 18, 21, 28, 24, 22, 24, 31, 27, 23, 24, 25, 23, 17, 22, 18, 24, 23, 23, 28, 23, 26, 25, 24, 23, 22, 24, 27, 24, 28, 24, 28, 22, 25, 25, 24, 22, 18, 27, 26, 26, 23, 33, 29, 22, 18, 17, 23, 19, 24, 25, 21, 25, 22, 24, 27, 22, 23, 22, 20, 25, 18, 25, 25, 21, 22, 27, 26, 24, 20, 23, 23, 26, 23, 24, 26, 21, 33, 24, 24, 21, 24, 24, 22, 19, 23, 21, 30, 27, 24, 21, 25, 22, 21, 22, 25, 24, 26, 18, 19, 18, 22, 27, 26, 28, 27, 23, 26, 23, 18, 25, 22, 22, 28, 27, 27, 23, 23, 21, 23]
LENLISTbg72 = [7, 7, 9, 9, 0, 5, 8, 10, 6, 8, 9, 9, 7, 9, 8, 8, 8, 6, 8, 6, 8, 8, 8, 10, 8, 9, 8, 7, 8, 7, 8, 7, 9, 9, 7, 9, 8, 8, 8, 10, 7, 6, 10, 9, 10, 7, 10, 8, 8, 4, 7, 7, 8, 7, 8, 7, 9, 6, 7, 10, 7, 8, 6, 6, 8, 8, 8, 8, 7, 8, 9, 7, 8, 6, 7, 6, 9, 8, 8, 8, 7, 12, 8, 8, 7, 9, 7, 7, 6, 7, 6, 10, 8, 7, 7, 8, 6, 5, 8, 7, 8, 7, 7, 6, 8, 8, 8, 8, 11, 8, 8, 7, 7, 8, 8, 8, 10, 10, 7, 7, 7, 7, 7]
LENLISTbg36 = [11, 11, 13, 14, 3, 7, 9, 16, 7, 8, 13, 9, 11, 12, 10, 10, 8, 4, 6, 11, 11, 12, 11, 18, 11, 12, 11, 16, 13, 11, 10, 11, 9, 10, 7, 14, 6, 12, 10, 8, 7, 7, 9, 11, 15, 6, 11, 8, 9, 7, 8, 8, 11, 9, 9, 7, 10, 8, 7, 6, 6, 10, 7, 7, 7, 11, 8, 13, 10, 7, 13, 11, 7, 9, 10, 8, 13, 8, 4, 10, 10, 17, 6, 10, 9, 10, 9, 9, 9, 6, 10, 12, 10, 10, 6, 9, 7, 7, 7, 9, 9, 9, 7, 6, 12, 11, 11, 7, 11, 9, 13, 10, 7, 11, 7, 6, 13, 6, 8, 13, 7, 9, 7]
LENLISTbg00 = [9, 7, 11, 11, 0, 8, 10, 11, 9, 9, 9, 10, 11, 12, 8, 8, 10, 4, 8, 8, 11, 10, 9, 14, 12, 10, 7, 12, 14, 13, 8, 8, 10, 11, 8, 13, 8, 7, 8, 10, 8, 11, 9, 11, 13, 7, 12, 7, 9, 6, 8, 8, 7, 7, 9, 8, 10, 6, 7, 8, 9, 8, 7, 6, 7, 7, 10, 9, 8, 5, 12, 9, 7, 8, 7, 8, 9, 11, 9, 5, 8, 14, 6, 8, 7, 7, 8, 10, 7, 9, 7, 9, 8, 8, 8, 8, 7, 6, 7, 8, 11, 7, 8, 6, 11, 8, 10, 11, 11, 9, 8, 7, 6, 11, 9, 11, 10, 8, 8, 11, 7, 9, 7]
LENLISTcl00 = [8, 13, 11, 12, 0, 6, 10, 12, 9, 10, 10, 8, 14, 11, 10, 8, 11, 5, 6, 9, 8, 9, 11, 19, 11, 11, 11, 13, 9, 10, 8, 8, 9, 15, 9, 11, 9, 9, 8, 9, 7, 5, 9, 11, 11, 7, 10, 11, 7, 7, 7, 8, 6, 8, 8, 8, 9, 7, 10, 9, 8, 10, 8, 6, 10, 9, 7, 7, 7, 8, 11, 9, 8, 10, 10, 6, 10, 7, 5, 8, 6, 10, 7, 9, 9, 10, 7, 8, 8, 8, 6, 13, 9, 9, 10, 10, 6, 8, 7, 9, 9, 7, 7, 7, 10, 10, 11, 7, 10, 11, 8, 10, 8, 10, 10, 9, 9, 6, 7, 8, 10, 7, 6]
LENLISTcl36 = [9, 8, 12, 15, 5, 5, 13, 11, 8, 8, 12, 12, 10, 11, 9, 9, 9, 9, 11, 8, 11, 10, 11, 18, 13, 16, 11, 14, 10, 9, 10, 11, 12, 16, 9, 12, 9, 10, 12, 8, 7, 5, 11, 12, 10, 7, 9, 0, 5, 6, 7, 8, 9, 7, 9, 10, 8, 6, 9, 6, 8, 10, 10, 8, 8, 9, 9, 8, 8, 6, 10, 11, 7, 11, 9, 8, 15, 6, 5, 7, 5, 16, 8, 12, 7, 10, 9, 6, 8, 6, 7, 14, 9, 7, 10, 9, 6, 6, 9, 7, 12, 6, 8, 8, 9, 12, 12, 9, 12, 8, 11, 13, 8, 9, 11, 10, 10, 7, 8, 9, 8, 11, 7]
LENLISTcl72 = [8, 7, 8, 9, 5, 6, 8, 10, 8, 8, 7, 10, 6, 8, 8, 7, 8, 7, 7, 6, 8, 7, 8, 8, 7, 7, 9, 7, 8, 7, 9, 8, 9, 9, 8, 9, 7, 7, 8, 10, 6, 5, 9, 9, 9, 7, 9, 9, 6, 6, 7, 8, 6, 7, 7, 7, 6, 6, 8, 9, 8, 8, 7, 7, 9, 7, 8, 7, 8, 8, 10, 8, 7, 6, 8, 7, 8, 6, 7, 8, 7, 10, 7, 8, 7, 7, 7, 6, 8, 6, 6, 12, 8, 7, 5, 7, 6, 6, 7, 8, 8, 6, 7, 6, 8, 8, 8, 7, 11, 6, 9, 7, 6, 8, 7, 8, 7, 10, 9, 8, 6, 6, 5]


FOLD = 10
random.seed(1024)

def load_variavle(filename):
  f=open(filename,'rb')
  r=pickle.load(f)
  f.close()
  return r


def get_acc(personCount,lenList,dataset,title):
    count = np.sum(lenList[:personCount])
    usedLen = lenList[:personCount]
    dataUsed = dataset[:count]
    print(len(dataUsed),'dataUsed')

    print('Classifying {0}'.format(personCount))
    y_true = []
    acc = []
    for i in range(len(usedLen)):
        y_true += [i] * lenList[i]

    y_true = np.array(y_true,dtype=np.int)
    kf = KFold(n_splits=FOLD, shuffle=True)
    clf = LogisticRegression(max_iter=2000, C=200)
    for train_index, test_index in kf.split(dataUsed, y_true):
        x_train = dataUsed[train_index]
        y_train = y_true[train_index]
        x_test = dataUsed[test_index]
        y_test = y_true[test_index]
        clf.fit(x_train, y_train)
        acc.append(metrics.accuracy_score(y_test, clf.predict(x_test)))
    print('avg acc is',np.average(acc))



if __name__ == '__main__':
    tag = 'nm'
    angle = 36
    matrixSet = load_variavle('matrix64_{0}_{1}'.format(tag,angle))#generated from 'gen_matrix_set.py'
    dataSet = load_variavle('data124_{0}_{1}'.format(tag,angle))#generated from 'generateDataset.py'
    plt.imshow(matrixSet[0])
    plt.show()
    lenList = []
    start = 0
    end = 0
    data = []
    for item in dataSet:
        start = end
        leng = int(len(item)/1.1)
        lenList.append(leng)
        end += leng
        if len(data) == 0:
            data = matrixSet[start:end]
        else:
            data = np.concatenate([data,matrixSet[start:end]],axis=0)
    print('Average length is',np.average(lenList))
    data = np.array(data)
    print(data.shape)
    print(np.sum(lenList))
    data = np.reshape(data,[-1,4096])
    for personCount in [24,62,74]:
        title = tag + '-' + str(angle)
        get_acc(personCount,lenList,data,title)
